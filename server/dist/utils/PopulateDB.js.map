{"version":3,"sources":["../../src/utils/PopulateDB.js"],"names":["Media","require","list","mongoose","request","PopulateDB","data","resolve","reject","deleteMany","err","i","length","bias","x","listing","name","params","y","api_avail","region","region_name","isLocked","save","connect","useNewUrlParser","then","console","log","catch","error"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQC,QAAQ,uBAAR,CAAd;AACA,IAAMC,OAAOD,QAAQ,gBAAR,CAAb;AACA,IAAME,WAAWF,QAAQ,UAAR,CAAjB;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;;AAEA,SAASI,UAAT,CAAoBC,IAApB,EAA0B;AAAA;;AACtB,WAAO;AAAA,4FAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,gCAAI;AACA;AACAR,sCAAMS,UAAN,CAAiB,EAAjB,EACI,UAASC,GAAT,EAAc;AACd,wCAAIA,GAAJ,EAAS;AACLF,+CAAOE,GAAP;AACH;AACJ,iCALD;AAMA,qCAASC,CAAT,GAAa,CAAb,EAAgBA,IAAIL,KAAKM,MAAzB,EAAiCD,GAAjC,EAAsC;AAC9BE,wCAD8B,GACvBP,KAAKK,CAAL,EAAQG,CAAR,GAAY,CAAZ,GAAiBR,KAAKK,CAAL,EAAQG,CAAR,IAAa,EAAb,GAAkB,OAAlB,GAA4B,cAA7C,GAAgER,KAAKK,CAAL,EAAQG,CAAR,GAAY,CAAC,CAAb,GAAkBR,KAAKK,CAAL,EAAQG,CAAR,IAAa,CAAC,EAAd,GAAmB,MAAnB,GAA4B,aAA9C,GAA+D,QADxG;AAE9BC,2CAF8B,GAEpB,IAAIf,KAAJ,CAAU;AACpBgB,8CAAMV,KAAKK,CAAL,EAAQK,IADM;AAEpBH,8CAAMA,IAFc;AAGpBI,gDAAQ;AACJH,+CAAGR,KAAKK,CAAL,EAAQG,CADP;AAEJI,+CAAGZ,KAAKK,CAAL,EAAQO,CAFP;AAGJC,uDAAWb,KAAKK,CAAL,EAAQQ,SAHf;AAIJC,oDAAQ;AACJC,6DAAa,WADT;AAEJC,0DAAU;AAFN;AAJJ;AAHY,qCAAV,CAFoB;;;AAgBlCP,4CAAQQ,IAAR;AACH;;AAEDhB;AACH,6BA5BD,CA4BE,OAAMG,GAAN,EAAW;AACTF,uCAAOE,GAAP;AACH;;AA/Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,QAAP;AAiCH;;AAED;AACA;AACAP,SAASqB,OAAT,CAAiB,2DAAjB,EAA8E;AAC1EC,qBAAiB;AADyD,CAA9E,EAGCC,IAHD,CAGM,YAAM;AACRC,YAAQC,GAAR,CAAY,sBAAZ;AACAvB,eAAWH,IAAX,EACGwB,IADH,CACQ;AAAA,eAAMC,QAAQC,GAAR,CAAY,oBAAZ,CAAN;AAAA,KADR,EAEGC,KAFH,CAES;AAAA,eAAOF,QAAQG,KAAR,CAAcpB,GAAd,CAAP;AAAA,KAFT;AAGH,CARD,EASCmB,KATD,CASO,UAACnB,GAAD,EAAS;AACZiB,YAAQG,KAAR,CAAcpB,GAAd;AACH,CAXD","file":"PopulateDB.js","sourcesContent":["const Media = require('../models/media-model');\r\nconst list = require('../data/biases');\r\nconst mongoose = require('mongoose');\r\nconst request = require('request');\r\n\r\nfunction PopulateDB(data) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            // Clear out all the records\r\n            Media.deleteMany({}, \r\n                function(err) {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n            });\r\n            for (let i = 0; i < data.length; i++) {\r\n                let bias = data[i].x > 6 ? (data[i].x >= 18 ? \"right\" : \"right-center\") : (data[i].x < -6 ? (data[i].x <= -18 ? \"left\" : \"left-center\") : \"center\");\r\n                let listing = new Media({\r\n                    name: data[i].name, \r\n                    bias: bias, \r\n                    params: {\r\n                        x: data[i].x, \r\n                        y: data[i].y, \r\n                        api_avail: data[i].api_avail,\r\n                        region: {\r\n                            region_name: 'Worldwide', \r\n                            isLocked: 0\r\n                        }\r\n                    }\r\n                });\r\n\r\n                listing.save();\r\n            }\r\n\r\n            resolve();\r\n        } catch(err) {\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\n// Connect to mongoDB \r\n// Connect to mongodb \r\nmongoose.connect('mongodb://admin:admin12@ds243897.mlab.com:43897/news-bias', {\r\n    useNewUrlParser: true\r\n})\r\n.then(() => {\r\n    console.log('Connected to mongodb');\r\n    PopulateDB(list)\r\n      .then(() => console.log('Populated Database'))\r\n      .catch(err => console.error(err));\r\n}) \r\n.catch((err) => {\r\n    console.error(err);\r\n});\r\n\r\n\r\n"]}