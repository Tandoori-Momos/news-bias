{"version":3,"sources":["../../src/config/winston.js"],"names":["logDir","fs","existsSync","mkdirSync","console","log","combine","format","timestamp","label","printf","loggerFormatFile","level","message","loggerFormatConsole","info","prettyJson","constructor","Object","logger","transports","Console","colorize","silent","process","env","NODE_ENV","File","filename","path","join"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,SAAS,YAAf;;AAEA;AACA,IAAG,CAACC,aAAGC,UAAH,CAAcF,MAAd,CAAJ,EAA2B;AACvB;AACAC,iBAAGE,SAAH,CAAaH,MAAb;AACAI,YAAQC,GAAR,CAAY,uBAAZ;AACH;;IAIOC,O,GAAsCC,e,CAAtCD,O;IAASE,S,GAA6BD,e,CAA7BC,S;IAAWC,K,GAAkBF,e,CAAlBE,K;IAAOC,M,GAAWH,e,CAAXG,M;;AAEnC;;AACA,IAAMC,mBAAmBD,OAAO,gBAAiC;AAAA,QAA/BE,KAA+B,QAA/BA,KAA+B;AAAA,QAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,QAAfL,SAAe,QAAfA,SAAe;;AAC7D,WAAUA,SAAV,UAAwBI,KAAxB,WAAmCC,OAAnC;AACH,CAFwB,CAAzB;;AAIA,IAAMC,sBAAsBJ,OAAO;AAAA,iBAAYK,KAAKH,KAAjB,UAA2BG,KAAKF,OAAhC;AAAA,CAAP,CAA5B;;AAEA;AACA,IAAMG,aAAaT,gBAAOG,MAAP,CAAc,gBAAQ;AACrC,QAAIK,KAAKF,OAAL,CAAaI,WAAb,IAA4BC,MAAhC,EAAwC;AACpCH,aAAKF,OAAL,GAAe,yBAAeE,KAAKF,OAApB,EAA6B,IAA7B,EAAmC,CAAnC,CAAf;AACH;;AAED,iBAAWE,KAAKH,KAAhB,UAA0BG,KAAKF,OAA/B;AACH,CANkB,CAAnB;;AAQA,IAAMM,SAAS,2BAAa;AACxBP,WAAO,MADiB;AAExBL,YAAQD,QACJE,WADI,EAEJG,gBAFI,CAFgB;;AAOxBS,gBAAY;AACR;AACA,QAAIA,oBAAWC,OAAf,CAAuB;AACnBC,kBAAU,KADS;AAEnBf,gBAAQD,QACJC,gBAAOe,QAAP,EADI,EAEJR,mBAFI,EAGJE,UAHI,CAFW;AAOnBO,gBAAQC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAPd,CAOqB;AAPrB,KAAvB,CAFQ;;AAYR;AACA;AACA;AACA,QAAIN,oBAAWO,IAAf,CAAoB,EAAEC,UAAUC,eAAKC,IAAL,CAAU9B,MAAV,EAAkB,eAAlB,CAAZ,EAApB,CAfQ,EAgBR,IAAIoB,oBAAWO,IAAf,CAAoB,EAAEC,UAAUC,eAAKC,IAAL,CAAU9B,MAAV,EAAkB,YAAlB,CAAZ,EAA6CY,OAAO,OAApD,EAApB,CAhBQ,EAiBR,IAAIQ,oBAAWO,IAAf,CAAoB,EAAEC,UAAUC,eAAKC,IAAL,CAAU9B,MAAV,EAAkB,WAAlB,CAAZ,EAA4CY,OAAO,MAAnD,EAApB,CAjBQ;AAPY,CAAb,CAAf;;kBA6BeO,M","file":"winston.js","sourcesContent":["import { createLogger, format, transports } from 'winston';\nimport path from 'path';\nimport fs from 'fs';\n\n// Directory for the log files \nconst logDir = './src/logs';\n\n// Check if the directory exists \nif(!fs.existsSync(logDir)) {\n    // Create the logs directory if it doesnt exist\n    fs.mkdirSync(logDir); \n    console.log('Created Log Directory');\n}\n\n\n\nconst { combine, timestamp, label, printf } = format;\n\n// Create custom format for logging to files\nconst loggerFormatFile = printf(({level, message, timestamp}) => {\n    return `${timestamp} [${level}]: ${message}`;\n});\n\nconst loggerFormatConsole = printf(info => `[${info.level}] ${info.message}`);\n\n// Convert objects to strings for logging \nconst prettyJson = format.printf(info => {\n    if (info.message.constructor == Object) {\n        info.message = JSON.stringify(info.message, null, 4);\n    }\n\n    return `[${info.level}] ${info.message}`;\n});\n\nconst logger = createLogger({\n    level: 'info',\n    format: combine(\n        timestamp(),\n        loggerFormatFile,\n    ),\n\n    transports: [\n        // - Print all logs to the console\n        new transports.Console({\n            colorize: 'all',\n            format: combine(\n                format.colorize(),\n                loggerFormatConsole, \n                prettyJson\n            ), \n            silent: process.env.NODE_ENV === 'test' // Disable logging to console while testing\n        }),\n\n        // - Write all logs with level 'info' and 'error' to 'combined.log'\n        // - Write all logs with level 'error' to 'error.log'\n        // - Write all logs with level 'warn' to 'error.log'\n        new transports.File({ filename: path.join(logDir, '/combined.log') }),\n        new transports.File({ filename: path.join(logDir, '/error.log'), level: 'error' }),\n        new transports.File({ filename: path.join(logDir, 'error.log'), level: 'warn' })\n        \n    ]\n});\n\nexport default logger;"]}