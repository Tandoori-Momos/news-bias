{"version":3,"sources":["../../src/tasks/getOutletBias.js"],"names":["getOutletBias","sourceArticle","resolve","reject","MediaListing","find","name","$regex","RegExp","url","$options","err","docs","Error","matched","distance","forEach","doc","undefined","bias"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA;AAAA,wFAAgB,iBAAeC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA,yDACX,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA;AACA;AACAC,iDAAaC,IAAb,CAAkB;AACdC,sCAAM;AACFC,4CAAQ,IAAIC,MAAJ,CAAW,MAAMP,cAAcQ,GAAd,CAAkB,CAAlB,CAAjB,CADN;AAEFC,8CAAU;AAFR;AADQ,6BAAlB,EAMA,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAChB,oCAAGD,GAAH,EAAQ;AACJR,2CAAOQ,GAAP;AACA,0CAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACH,iCAHD,MAGO;AACH;AACA;AACA,wCAAIG,UAAU;AACVC,kDAAU;AADA,qCAAd;;AAIA;AACA;AACAH,yCAAKI,OAAL,CAAa,UAASC,GAAT,EAAc;AACvB,4CAAIF,WAAW,kCAAoBE,IAAIX,IAAxB,EAA8BL,cAAcQ,GAA5C,EAAiDS,SAAjD,EAA4D,IAA5D,CAAf;AACA,4CAAIH,YAAYD,QAAQC,QAAxB,EAAkC;AAC9BD,oDAAQR,IAAR,GAAeW,IAAIX,IAAnB;AACAQ,oDAAQK,IAAR,GAAeF,IAAIE,IAAnB;AACAL,oDAAQC,QAAR,GAAmBA,QAAnB;AACH;AACJ,qCAPD;AAQAb,4CAAQY,QAAQK,IAAhB;AACH;AACJ,6BA7BD;AA8BH,yBAnCM,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAuCenB,a","file":"getOutletBias.js","sourcesContent":["import MediaListing from './../models/media-model';\nimport { JaroWinklerDistance } from 'natural';\n\n// Fetches the bias from the media outlet database for\n// a media outlet whose name is most similar to that of \n// the source article. This is done as URLs are in a \n// different format as compared to the records in the \n// database. \n//\n// For eg: thehindu is the URL whereas The Hindu is the \n// name\n\nconst getOutletBias = async function(sourceArticle) {\n    return new Promise((resolve, reject) => {\n       \n        // Get list of all media outlets by creating a new regular expression \n        // to get all media outlets starting from the same letter as that\n        // of the source articles url\n        MediaListing.find({\n            name: {\n                $regex: new RegExp('^' + sourceArticle.url[0]), \n                $options: \"i\"\n            }\n        }, \n        function(err, docs) {\n            if(err) {\n                reject(err);\n                throw new Error(err);\n            } else {\n                // Initialize an empty object to store \n                // the matched record\n                let matched = {\n                    distance: 0\n                };\n\n                // Store the media outlets information whose name is most similar to that \n                // of the publisher of the source article\n                docs.forEach(function(doc) {\n                    let distance = JaroWinklerDistance(doc.name, sourceArticle.url, undefined, true);   \n                    if (distance >= matched.distance) {\n                        matched.name = doc.name; \n                        matched.bias = doc.bias;\n                        matched.distance = distance;\n                    }\n                });\n                resolve(matched.bias);                \n            }\n        });\n    })\n}\n\nexport default getOutletBias;"]}