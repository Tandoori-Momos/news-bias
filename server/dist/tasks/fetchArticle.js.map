{"version":3,"sources":["../../src/tasks/fetchArticle.js"],"names":["fetchArticle","sourceArticle","sourceBias","resolve","reject","scores","sourceScore","get","newArticle","key","score","bias","MediaListing","find","err","docs","filter","doc","params","api_avail","map","name","similarArticles","console","log","articles","match","reduce","prev","current","title","push","length","logger","info","status","url"],"mappings":"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","file":"fetchArticle.js","sourcesContent":["import MediaListing from '../models/media-model';\r\nimport logger from '../config/winston';\r\nimport shuffleArray from './../utils/shuffle';\r\nimport compareTokens from './../utils/compareTokens';\r\nimport requestArticle from './requestArticle';\r\n\r\n// Fetches an array of articles from news-json api \r\n// which has a different political leaning \r\n// than the one given\r\n\r\nconst fetchArticle = async (sourceArticle, sourceBias) => {\r\n    return new Promise((resolve, reject) => {        \r\n        // Get the bias of the new article based\r\n        // on the bias of the source article\r\n        const scores = new Map([\r\n            ['left', -2],\r\n            ['left-center', -1],\r\n            ['center', 0],\r\n            ['right-center', 1],\r\n            ['right', 2]\r\n        ]);\r\n    \r\n        const sourceScore = scores.get(sourceBias);\r\n\r\n        // Stoes the new article fetched from Google News \r\n        const newArticle = { };\r\n        for (let [key, score] of scores) {\r\n            if (score == sourceScore * -1) {\r\n                newArticle.bias = key;\r\n            }\r\n        }\r\n        // Get an array of random media outlets \r\n        MediaListing.find({\r\n            bias: newArticle.bias\r\n        }, async function(err, docs) {\r\n            docs = docs.filter(doc => doc.params.api_avail)\r\n                    .map(doc => doc.name);\r\n\r\n            // Shuffle the docs array for extra randomness \r\n            docs = shuffleArray(docs);\r\n            let similarArticles = [];\r\n            for (let doc of docs) {\r\n                try {\r\n                    console.log('Processing for', doc);\r\n                    const articles = await requestArticle(sourceArticle, doc);\r\n                    const match = articles.reduce(function(prev, current) {\r\n                        if (compareTokens(prev.title, sourceArticle.title) > compareTokens(current.title, sourceArticle.title)) {\r\n                            return prev;\r\n                        } else {\r\n                            return current;\r\n                        }\r\n                    });\r\n                    similarArticles.push(match);\r\n                    // Ensure four articles have been selected\r\n                    if (similarArticles.length) {\r\n                        break;\r\n                    }\r\n                } catch (err) {\r\n                    logger.info(`No articles found for ${doc}`);\r\n                    continue;\r\n                } finally {\r\n                    console.log(similarArticles);\r\n                }\r\n            }\r\n            resolve({\r\n                status: 200,\r\n                title: similarArticles[0].title,\r\n                url: similarArticles[0].url,\r\n                bias: newArticle.bias\r\n            });\r\n        });\r\n    })\r\n}\r\n\r\nexport default fetchArticle;"]}